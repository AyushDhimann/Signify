import sys
import os
import fitz  # PyMuPDF
from docx import Document
from PIL import Image
from datetime import datetime
import re
import os

file_extension = ""
lol = ""

def extract_file_extension(file_path):
    # Extract the file extension from the provided file path
    return os.path.splitext(file_path)[-1].lower()

def extract_pdf_metadata(pdf_document):
    metadata = {}
    try:
        metadata["security_level"] = pdf_document.metadata.get("encrypt")
        metadata["producer"] = pdf_document.metadata.get("producer")
        mod_date = pdf_document.metadata.get("modDate")
        if mod_date:
            # Extract and clean the date part
            date_match = re.search(r'\d{14}', mod_date)
            if date_match:
                mod_date = date_match.group()
                metadata["modification_date"] = datetime.strptime(mod_date, "%Y%m%d%H%M%S")
    except Exception as e:
        print("Error extracting PDF metadata:", str(e))
    return metadata

def extract_docx_metadata(docx_document):
    metadata = {}
    try:
        metadata["security_level"] = "Not applicable"
        metadata["producer"] = "Not applicable"
        metadata["modification_date"] = datetime.fromtimestamp(os.path.getmtime(docx_document))
    except Exception as e:
        print("Error extracting DOCX metadata:", str(e))
    return metadata

def extract_metadata(file_path):
    print("Starting MetaData")
    if not os.path.exists(file_path):
        print(f"File not found: {file_path}")
        return {}

    file_extension = os.path.splitext(file_path)[-1].lower()

    if file_extension == extract_file_extension(file_path):
        try:
            pdf_document = fitz.open(file_path)
            metadata = extract_pdf_metadata(pdf_document)
            pdf_document.close()
            return metadata
        except Exception as e:
            print(f"Error opening PDF file: {str(e)}")

    elif file_extension == extract_file_extension(file_path):
        try:
            docx_document = Document(file_path)
            metadata = extract_docx_metadata(docx_document)
            return metadata
        except Exception as e:
            print(f"Error opening DOCX file: {str(e)}")

    else:
        print(f"Unsupported file type: {file_path}")
    
    return {}

def count_empty_and_full_values(file_path):
    print("Starting Values")
    empty_matches, actual_values, full_matches = 0, 0, 0

    if os.path.exists(file_path) and lol.endswith(".txt"):
        try:
            with open(file_path, "r") as f:
                input_string = f.read()

            # Define regular expressions to match empty and full values.
            underscore_without_spaces = r'(?<!\w)_+(?!\w)'
            underscore_with_surrounding_characters = r'\b\w*_{2,}(?!\w|_\w)\b'

            # Find and count occurrences of empty and full values.
            empty_matches = len(re.findall(underscore_without_spaces, file_path))
            full_matches = len(re.findall(underscore_with_surrounding_characters, file_path))
            actual_values = full_matches - empty_matches
        except Exception as e:
            print(f"Error reading and processing text file: {str(e)}")

    return empty_matches, actual_values, full_matches

def process_file_name(file_name):
    if file_name.startswith("process1-"):
        file_name = file_name[len("process1-"):][::-1]
        file_name = "process1-" + file_name
    return file_name

def main():
    if len(sys.argv) != 4:
        print("Usage: python pythonScript1.py input_file output_file original_file_name")
        sys.exit(1)

    input_file_path = sys.argv[1]
    output_file_path = sys.argv[2]
    original_file_name = sys.argv[3]

    frlol2 = original_file_name

    print("input: ",input_file_path, "output: ",output_file_path, "original: ",original_file_name)

    lol = output_file_path
    original_file_name = original_file_name[::-1]

    oglen = len(original_file_name)
    extoglen = oglen + 9
    lol = lol[:-extoglen]
    lol += original_file_name
    print("LOL: ",lol)


    lol2 = lol[:-oglen]
    lol2 += frlol2
    print("LOL2: ",lol2)
    input_file_path = lol2

    # Extract the file extension from the 'lol' variable
    file_extension = extract_file_extension(lol)

    # Process the file name
    original_file_name = process_file_name(original_file_name)

    metadata = extract_metadata(input_file_path)
    empty_values, actual_values, full_values = count_empty_and_full_values(input_file_path)

    # Create a string containing metadata and empty lines data
    result = f"File: {original_file_name}\n"
    result += f"File Extension: {file_extension}\n"  # Add file extension to result

    if metadata:
        result += f"Security Level: {metadata.get('security_level', 'Not available')}\n"
        result += f"Producer: {metadata.get('producer', 'Not available')}\n"
        mod_date = metadata.get("modification_date")
        if mod_date:
            result += f"Modification Date: {mod_date.strftime('%Y-%m-%d %H:%M:%S')}\n"
    else:
        result += "No metadata available\n"

    result += "\nText File Values:\n"
    result += f"Empty values: {empty_values}\n"
    result += f"Actual values: {actual_values}\n"
    result += f"Full values: {full_values}\n"

    # Write the result to the output file
    with open(output_file_path, 'w') as output_file:
        output_file.write(result)

    try:
        # Check if the file exists before attempting to delete it
        if os.path.exists(input_file_path):
            os.remove(input_file_path)
        else:
            print(f"File '{input_file_path}' does not exist.")
    except Exception as e:
        print(f"Error deleting the file: {e}")

if __name__ == "__main__":
    main()
